server:
  port: ${application.port}
  tomcat:
    accept-count: 500
    threads:
      max: 500
      min-spare: 200

spring:
  application:
    name: ${application.name}
  profiles:
    include: main
    #
    active: example

  boot:
    admin:
      client:
        enabled: false
  main:
    allow-bean-definition-overriding: true
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://${forsrc.datasource.host}:${forsrc.datasource.port}/information_schema?serverTimezone=PRC&autoReconnect=true&characterEncoding=utf8&useUnicode=true&useSSL=false
    username: ${forsrc.datasource.username}
    password: ${forsrc.datasource.password}
    driver-class-name: com.mysql.jdbc.Driver
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 60000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙
      filters: stat,wall,log4j
      filter:
        stat:
          # 是否启用监控界面，默认为 false
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 2000
      # 打开 PSCache，并且指定每个连接上 PSCache 的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置 DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: .js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
      # 配置 DruidStatViewServlet
      stat-view-servlet:
        # 登录用户名/密码
        login-username: admin
        login-password: admin
        url-pattern: /druid/*
        # IP 白名单，没有配置或者为空，则允许所有访问
        allow: 127.0.0.1
        # IP 黑名单，若白名单也存在，则优先使用 deny
        deny: ''
        # 禁用 HTML 中 Reset All 按钮
        reset-enable: false
  liquibase:
    enabled: false
  redis:
    enable: false

mybatis:
  mapper-locations: classpath*:mybatis/**/*.xml
  config-location: classpath*:mybatis/**/*.xml

logging:
  level:
    root: ${log.level.root}
    com.project.local: ${log.level.root}
    com.project.local.repository: ${log.level.root}
    com.project.local.mvc.dao: ${log.level.dao}
  file:
    name: ${log.file}

thread:
  pool:
    executor:
      corePoolSize: 10
      maxPoolSize: 50
      queueCapacity: 100
      keepAliveSeconds: 300
      awaitTerminationSeconds: 60  #设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，而不是阻塞住
      threadNamePrefix: "taskExecutor-"
    scheduler:
      poolSize: 10
      awaitTerminationSeconds: 60  #
      threadNamePrefix: "taskScheduler-"

okhttp:
  connect-timeout: 30
  read-timeout: 30
  write-timeout: 30
  # 连接池中整体的空闲连接的最大数量
  max-idle-connections: 200
  # 连接空闲时间最多为 300 秒
  keep-alive-duration: 300

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}

forsrc:
  server:
#    host: https://www.forsrc.com
#    host: localhost
    host: https://gen.forsrc.com
#    port: 6100
    path:
      generator: forsrc/generator
      download: forsrc/download