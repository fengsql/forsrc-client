#
application:
  port: 8010
  name: 'forsrc-client'

log:
  level:
    root: info
    dao: debug
  file: log/app.log

forsrc:
  # 授权部分，配置账号 username 和 secret
  authorization:
    # 用户名
    username: 'forsrc'  #'forsrc@126.com'  #forsrc
    # 秘钥，不是密码，注册后会自动生成秘钥
    secret: 'forsrc'  #'h0WQVrye8DCBuTxZRBoDjaH1OQ5eCbNf'  #forsrc
  # 文件源配置，如果 generator.from-file 为 false，忽略此配置
  filesource:
    # 指定设计文档的路径，目前仅支持 docx 格式
    doc-file: ${project.filesource.doc-file}
    # 文档中的表是否有标题头(第一行)，true 有标题头(标题头不计入字段，将被忽略)，false 无标题头
    table-has-header: false
    # 设置是否检查关键字，设置为true将检查数据库关键字，java关键字和内部关键字不管是否设置都会检查。如果不检查生成的源码有可能出现错误。
    check-reserve-word: false
    # 文档中字段属性所在的列，从 1 开始，-1 表示无此定义，前三个属性title, name, type必须定义
    field-property-column:
      # 字段标题
      title: 1
      # 字段名称，参数格式(字母开头，字母，数字或下划线组成)
      name: 2
      # 字段数据库类型
      type: 3
      # 是否非空，非空字段设置为'是'，可空字段不用填
      notnull: 4
      # 缺省值
      default-value: 5
      # 字段说明，字段配置均在此列
      description: 6
  # 数据库配置，如果 generator.from-file 为 true，忽略此配置
  datasource:
    # 数据库类型，目前仅支持 mysql
    type: mysql
    host: ${project.datasource.host}
    port: ${project.datasource.port}
    database: ${project.datasource.database}
    username: ${project.datasource.username}
    password: ${project.datasource.password}
  generator:
    # 是否从文档生成，true从文档生成。false 从数据库生成，如果是从数据库生成，需要配置 datasource 数据源。默认为 false
    from-file: ${project.generator.from-file}
    application:
      app-key: ${project.generator.application.app-key}
      version: ${project.generator.application.version}  # 分支版本，0 最新版本
    database:
      type: ${project.generator.database.type}  # 生成数据库的类型，目前支持：mysql，postgresql，greenplum
      sql-version: ${project.generator.database.sql-version}
    filter:
      table:
        # 指定仅生成以表头部开头的表，!开头表示不以这个开头的，与其它条件为 and 关系，不能设置多个。
        name-prefix: ${project.generator.filter.table.name-prefix}
        # 指定表名包含什么内容，仅字母、数字或下划线，与其它条件为 and 关系，不能设置多个。
        name-contain: ${project.generator.filter.table.name-contain}
        # 正则表达式指定表名，可以指定多个表达式，逗号分隔，与其它条件为 and 关系。
        table-regex: ${project.generator.filter.table.table-regex}
        # 指定哪些表，多个表用英文逗号分隔，空或*为全部，与其它条件为 and 关系。
        tables: ${project.generator.filter.table.tables}
    option:
      database:
        # 是否去掉表头，true 去掉表头作为tableBody，false 不去掉，默认为 false，如 table_user 表，去掉后类名为 User，不去掉为 TableUser
        rid-table-prefix: ${project.generator.option.database.rid-table-prefix}
        # sql 语句是否添加注释，true添加。
        sql-add-comment: true
        # sql 语句的字段注释中，是否添加文档的说明部分，默认为 false 不添加。当为 true 时，sql 的字段注释中将包含配置信息
        sql-add-comment-info: false
        # 缺省关系查询显示字段总个数，默认10，可以在主键或外键字段中配置，0自动计算，-1全部不显示。
        # 在主键字段中配置，可以设置当前表显示的总共字段数（包含外键表中的字段）。在外键字段中配置可以设置当前外键表中显示的字段数。
        select-field-num: 20
    project:
      name: ${project.generator.project.name}  # 项目名称
      title: ${project.generator.project.title}  # 项目标题
      app-pack: ${project.generator.project.app-pack}  # app 包的名称，生成 app 的源程序都在这个包下面
    output:
      # 是否生成 app 部分
      generator-app: ${project.generator.output.generator-app}
      # 是否生成 web 部分
      generator-web: ${project.generator.output.generator-web}
      # 是否生成 sql 语句
      generator-sql: ${project.generator.output.generator-sql}
      # app 的保存路径
      save-app-path: ${project.generator.output.save-app-path}
      # web 的保存路径
      save-web-path: ${project.generator.output.save-web-path}
      # sql 的保存路径
      save-sql-path: ${project.generator.output.save-sql-path}
